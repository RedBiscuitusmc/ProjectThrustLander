using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MovingPlatform : MonoBehaviour
{
    //**=============================================
    #region |SerializedFields|
    //?=============================================
    [Header("Waypoint Varibles")]
    [SerializeField] private WayPoint _waypointPath;
    [SerializeField] private float _speed;
    //?=============================================
    #endregion
    //**=============================================
    #region |Varibles|
    //?=============================================
    [Header("General")]
    public int _targetWaypointIndex;

    private Transform _previousWaypoint;
    private Transform _targetWaypoint;

    private float _timeToWaypoint;
    private float _elapsedTime;
    private float DelayWait = 0f;

    [Header("Bounce Selection")]
    private float NoMagicNumbers = 0f;
    public float amp;
    public float freq;
    
    Vector3 initPos;
    //?=============================================
    #endregion
    //**=============================================
    #region |Start / Update / Awake|
    //?=============================================
    void Awake()
    {
        TargetNextWaypoint();
        initPos = transform.position; 
    }
    //?=============================================
    void Start()
    {
        
    }
    //?=============================================
    void FixedUpdate()
    {
       StartTime();  
    }
    //?=============================================
    #endregion
    //**=============================================
    #region |Methods|
    //?=============================================
    void UpdatePosition()
    {
        transform.position = new Vector3(initPos.x, Mathf.Sin(Time.time * freq) * amp + initPos.y, NoMagicNumbers);
    }
    //?=============================================
    void StartTime()
    {
         _elapsedTime += Time.deltaTime;

        float elapsedPercentage = _elapsedTime / _timeToWaypoint;
        elapsedPercentage = Mathf.SmoothStep(0, 1, elapsedPercentage);
        transform.position = Vector3.Lerp(_previousWaypoint.position, _targetWaypoint.position, elapsedPercentage);
        //transform.rotation = Quaternion.Lerp(_previousWaypoint.rotation, _targetWaypoint.rotation, elapsedPercentage); // Rotation

        if (elapsedPercentage >= 1)
        {
            TargetNextWaypoint();
        }
    }
    //?=============================================
    void TargetNextWaypoint()
    {
        _previousWaypoint = _waypointPath.GetWaypoint(_targetWaypointIndex);
        _targetWaypointIndex = _waypointPath.GetNextWaypointIndex(_targetWaypointIndex);
        _targetWaypoint = _waypointPath.GetWaypoint(_targetWaypointIndex);

        _elapsedTime = DelayWait;

        float distanceToWaypoint = Vector3.Distance(_previousWaypoint.position, _targetWaypoint.position);
        _timeToWaypoint = distanceToWaypoint / _speed;
    }
    //?=============================================
    #endregion
    //**=============================================
}
