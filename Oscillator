using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Oscillator : MonoBehaviour
{
    //**=============================================
    #region |SerializedFields|
    //?=============================================
    [Header("Vectors")]
    [SerializeField]  Vector3 movementVector;
    [SerializeField] [Range(0,5)] float movementFactor; // set this to a vector3 and test different ways to make the object move 
    //newCode
    [SerializeField] private List<Transform> waypoints;
    [SerializeField] private float moveSpeed = 5f;
    //?=============================================
    [Header("Movement")]
    [SerializeField] float objectMovementSpeed = 0f;
    [SerializeField] float period = 2f;
    //?=============================================
    [Header("Floats")]
    [SerializeField] float smoothTime = 0f;
    [SerializeField] float delayTime = 0f;
    //?=============================================
    #endregion
    //**=============================================
    #region |Varibles|
    [Header("Varibles")]
    //newCode 
    private int _currentWaypoint;
    #endregion
    //**=============================================
    #region |Referances|
    //?=============================================
    [Header("Class")]
    Vector3 velocity;
    Vector3 targetPosition;
    Vector3 startPosition;
    //?=============================================
    #endregion
    //**=============================================
    #region |Start / Update / Awake|
    //?=============================================
    void Awake()
    {
        startPosition = transform.position;
    }   
    //?=============================================
    void Start()
    {
        //newCode
        if (waypoints.Count <= 0) return;
        _currentWaypoint = 0;
    }
    //?=============================================
    void Update()
    {
        MovePlatForm();
    }
    //?=============================================
    private void FixedUpdate()
    {
    HandleMovement();
    }
    //?=============================================
    private void HandleMovement()
    {
    transform.position = Vector3.MoveTowards(transform.position, waypoints[_currentWaypoint].transform.position,(moveSpeed * Time.deltaTime));
        if (Vector3.Distance(waypoints[_currentWaypoint].transform.position, transform.position) <= 0)
        {
            _currentWaypoint++;
        }
        if (_currentWaypoint != waypoints.Count) 
        {
            return;
        }
    waypoints.Reverse();
    _currentWaypoint = 0;
    }
    //?=============================================
    #endregion
    //**=============================================
    #region  |Methods|
    //?=============================================
    void TestMethod()
    {
        //!===============================
        // Don't touch this unless your a math god.... 
        //!===============================
        if ( period <= Mathf.Epsilon ) { return; }
        //!===============================
        //!===============================
        float cycles = Time.time / period;
        const float tau = Mathf.PI * 2;
        float rawSinWave = Mathf.Sin(cycles * tau);
        //!===============================
        //!===============================
        movementFactor = (rawSinWave + 1f) / 2f;
        Vector3 offset = movementVector * movementFactor;
        transform.position = startPosition + offset * Time.deltaTime;
        //!===============================
        //!===============================
        offset = Vector3.SmoothDamp(transform.position, targetPosition, ref velocity, smoothTime, objectMovementSpeed);
        //!===============================
    }
    //?=============================================
    void MovePlatForm()
    {
        Invoke("TestMethod", delayTime);
    }
    #endregion
    //**=============================================
}
